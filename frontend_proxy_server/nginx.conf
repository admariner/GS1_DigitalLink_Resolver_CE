user  nginx;
     worker_processes  1;

     error_log  /var/log/nginx/error.log warn;
     pid        /var/run/nginx.pid;

     events {
         worker_connections  1024;
     }

     http {
         include       /etc/nginx/mime.types;
         default_type  application/octet-stream;

         log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for"';

         access_log  /var/log/nginx/access.log  main;

         sendfile        on;
         #tcp_nopush     on;
         keepalive_timeout  65;
         gzip  on;

         server {
             listen 80;

             location / {
                 proxy_pass http://web-service:4000/api/;
                 proxy_buffer_size 16k;
                 proxy_buffers 4 16k;
                 proxy_busy_buffers_size 16k;
             }

             # Use a single location block with a prefix location match
             location /api {
                 proxy_pass http://data-entry-service:3000;
                 proxy_set_header Host $host;
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_set_header X-Forwarded-Proto $scheme;
             }

             location /swaggerui {
                 proxy_pass http://data-entry-service:3000;
                 proxy_set_header Host $host;
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_set_header X-Forwarded-Proto $scheme;
             }

             location /test {
                 proxy_pass http://test-service:2000/;
                 proxy_set_header Host $host;
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_set_header X-Forwarded-Proto $scheme;
             }
         }
     }